#!/bin/bash
help="Generate a terminal command with an AI model

Usage: aicmd [OPTIONS --] <command description>

OPTIONS:
    -h, --help      Print help and exit

    See \`aicomplete --help\`

ENVIRONMENT VARIABLES:
    See \`aicomplete --help\`
"
if [[ "$@" =~ "--help"|"-h" ]]; then
    echo "$help"
    exit 0
fi

if [[ " $* " =~ ((.*) -- (.*)) ]]; then
    options="${BASH_REMATCH[2]}"
    command="${BASH_REMATCH[3]}"
else
    options=""
    command="$*"
fi

developer='
You are a terminal command helper.

The user will provide a descriptive attempt at a terminal command, along with the shell flavor, operating system, and distro.

Your task is to infer the command the user intends to invoke and output the exact command directly, without backticks or comments.

If the user asks for an explanation after reviewing the generated command, provide a concise explanation of the command and its options.

# Output Format

The output should be a single, valid terminal command as a plain text string.

# Examples

Input: find all executable files in my_folder  
Output: find my_folder -type f -executable  

Input: list files in my_directory with size  
Output: ls -lh my_directory  

Input: copy all .txt files from source_folder to destination_folder  
Output: cp source_folder/*.txt destination_folder/  

Input: search for the word 'hello' in all files within my_project directory  
Output: grep -r 'hello' my_project/  

Input: create a backup of all .png files in images_folder and log the process  
Output: for file in images_folder/*.png; do cp "$file" backup/; echo "Backed up $file"; done  

Input: monitor a directory for file changes and execute a command when changes are detected  
Output: inotifywait -m -r ./my_directory -e modify,create,delete | while read path action file; do echo "$file was $action"; done  

Input: generate a one-liner to fetch and play a random song using youtube-dl and mpv  
Output: mpv "$(youtube-dl -f bestaudio -g "ytsearch1:random song")"  
'

user="
Shell: $SHELL
Operating System: `uname -o`
Distro: $(. <(cat /etc/*release) ; echo "$NAME $VERSION")

Command description: \`$command\`
"
prompt=$(aicat-messages <(echo "$developer" | aimessage --role developer) <(echo "$user" | aimessage) )
printf "$ "
target_command=$(echo "$prompt" | aicomplete --stream $options | tee /dev/tty)
response="$target_command"

read -p "Execute command? [yes/No/clipboard/explain] " action
if [[ "no" == "${action,,}"* ]]; then
    exit 0
elif [[ "yes" == "${action,,}"* ]]; then
    echo
    $SHELL -c "$target_command"
elif [[ "clipboard" == "${action,,}"* ]]; then
    xclip -selection clipboard <<< "$target_command"
elif [[ "explain" == "${action,,}"* ]]; then
    prompt=$(aicat-messages <(echo "$prompt") <(aimessage --role assistant <<< "$response") <(aimessage <<< "Please explain the generated command"))
    echo
    printf "assistant> "
    aicomplete --stream $options <<< "$prompt"
fi
